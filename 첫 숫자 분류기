import numpy as np
data = np.array([[1, 1, 1,
                 1, 0, 1,
                 1, 0, 1,
                 1, 1, 1],

                 [0, 1, 1,
                  1, 0, 1,
                  1, 0, 1,
                  1, 1, 1],

                 [1, 1, 0,
                  1, 0, 1,
                  1, 0, 1,
                  1, 1, 1],

                 [1, 1, 1,
                  1, 0, 1,
                  1, 0, 1,
                  1, 1, 0],

                 [1, 1, 1,
                  1, 0, 1,
                  1, 0, 1,
                  0, 1, 1],

                 [0, 0, 0,
                  1, 1, 1,
                  1, 0, 1,
                  1, 1, 1],

                 [0, 0, 0,
                  0, 1, 1,
                  1, 0, 1,
                  1, 1, 1],

                 [0, 0, 0,
                  1, 1, 0,
                  1, 0, 1,
                  1, 1, 1],

                 [0, 0, 0,
                  1, 1, 1,
                  1, 0, 1,
                  1, 1, 0],

                 [0, 0, 0,
                  1, 1, 1,
                  1, 0, 1,
                  0, 1, 1],

                 [1, 1, 1,
                  1, 0, 1,
                  1, 1, 1,
                  0, 0, 0],

                 [0, 1, 1,
                  1, 0, 1,
                  1, 1, 1,
                  0, 0, 0],

                 [1, 1, 0,
                  1, 0, 1,
                  1, 1, 1,
                  0, 0, 0],

                 [1, 1, 1,
                  1, 0, 1,
                  1, 1, 0,
                  0, 0, 0],

                 [1, 1, 1,
                  1, 0, 1,
                  0, 1, 1,
                  0, 0, 0],

                 [1, 0, 1,
                  1, 0, 1,
                  1, 0, 1,
                  1, 1, 1],

                 [1, 1, 1,
                  1, 0, 0,
                  1, 0, 1,
                  1, 1, 1],

                 [1, 1, 1,
                  1, 0, 1,
                  1, 0, 0,
                  1, 1, 1],

                 [1, 1, 1,
                  1, 0, 1,
                  1, 0, 1,
                  1, 0, 1],

                 [1, 1, 1,
                  1, 0, 1,
                  0, 0, 1,
                  1, 1, 1],

                 [1, 1, 1,
                  0, 0, 1,
                  1, 0, 1,
                  1, 1, 1],

                 [0, 0, 1,
                  1, 0, 1,
                  1, 0, 1,
                  1, 1, 1],

                 [0, 1, 1,
                  1, 0, 0,
                  1, 0, 1,
                  1, 1, 1],

                 [0, 1, 1,
                  1, 0, 1,
                  1, 0, 0,
                  1, 1, 1],

                 [0, 1, 1,
                  1, 0, 1,
                  1, 0, 1,
                  1, 0, 1],

                 [0, 1, 1,
                  1, 0, 1,
                  0, 0, 1,
                  1, 1, 1],

                 [0, 1, 1,
                  0, 0, 1,
                  1, 0, 1,
                  1, 1, 1],

                 [1, 1, 0,
                  1, 0, 1,
                  1, 0, 1,
                  1, 1, 1],

                 [1, 1, 0,
                  1, 0, 1,
                  1, 0, 0,
                  1, 1, 1],

                 [1, 1, 0,
                  1, 0, 1,
                  1, 0, 1,
                  1, 0, 1],

                 [1, 1, 0,
                  1, 0, 1,
                  0, 0, 1,
                  1, 1, 1],

                 [1, 1, 0,
                  0, 0, 1,
                  1, 0, 1,
                  1, 1, 1],

                 [0, 1, 0,
                  0, 1, 0,
                  0, 1, 0,
                  0, 1, 0],

                 [1, 1, 0,
                  0, 1, 0,
                  0, 1, 0,
                  0, 1, 0],

                 [0, 1, 0,
                  0, 1, 0,
                  0, 1, 0,
                  0, 1, 1],

                 [0, 1, 0,
                  0, 1, 0,
                  0, 1, 0,
                  1, 1, 0],

                 [0, 1, 0,
                  0, 1, 0,
                  0, 1, 0,
                  0, 1, 1],

                 [1, 1, 0,
                  0, 1, 0,
                  0, 1, 0,
                  1, 1, 0],

                 [1, 1, 0,
                  0, 1, 0,
                  0, 1, 0,
                  0, 1, 1],

                 [1, 1, 0,
                  0, 1, 0,
                  0, 1, 0,
                  1, 1, 1],

                 [0, 1, 0,
                  0, 1, 1,
                  0, 1, 0,
                  0, 1, 0],

                 [0, 1, 0,
                  0, 1, 0,
                  0, 1, 1,
                  0, 1, 0],

                 [1, 1, 0,
                  0, 1, 1,
                  0, 1, 0,
                  0, 1, 0],

                 [1, 1, 0,
                  0, 1, 0,
                  0, 1, 1,
                  0, 1, 0],

                 [0, 1, 0,
                  0, 1, 1,
                  0, 1, 0,
                  1, 1, 0],

                 [0, 1, 0,
                  0, 1, 0,
                  0, 1, 1,
                  1, 1, 0],

                 [0, 1, 0,
                  0, 1, 0,
                  0, 1, 0,
                  1, 1, 1],

                 [0, 1, 0,
                  0, 1, 1,
                  0, 1, 1,
                  0, 1, 1],

                 [1, 1, 0,
                  0, 1, 0,
                  0, 1, 0,
                  0, 1, 0],

                 [0, 1, 1,
                  0, 1, 1,
                  0, 1, 1,
                  0, 1, 1],

                 [1, 1, 0,
                  1, 1, 0,
                  0, 1, 0,
                  0, 1, 0],

                 [1, 1, 0,
                  0, 1, 0,
                  1, 1, 0,
                  0, 1, 0],

                 [1, 1, 0,
                  1, 1, 0,
                  1, 1, 0,
                  1, 1, 0],

                 [1, 1, 0,
                  0, 1, 0,
                  0, 0, 0,
                  0, 1, 0],

                 [1, 1, 0,
                  1, 1, 0,
                  0, 1, 0,
                  0, 1, 0],

                 [0, 1, 0,
                  0, 1, 0,
                  0, 1, 0,
                  1, 0, 0],

                 [1, 0, 0,
                  0, 1, 0,
                  0, 1, 0,
                  0, 1, 0],

                 [1, 0, 0,
                  1, 1, 0,
                  0, 1, 0,
                  0, 0, 1],

                 [0, 1, 0,
                  0, 0, 0,
                  0, 1, 0,
                  1, 1, 0],

                 [0, 1, 0,
                  0, 1, 0,
                  0, 0, 0,
                  1, 1, 0],

                 [0, 0, 0,
                  0, 1, 0,
                  0, 1, 0,
                  1, 1, 0],

                 [0, 0, 0,
                  0, 1, 0,
                  0, 1, 0,
                  0, 1, 0],

                 [0, 1, 0,
                  0, 1, 0,
                  0, 1, 0,
                  0, 0, 0],

                 [0, 1, 0,
                  0, 0, 1,
                  0, 0, 1,
                  0, 1, 0],

                 [0, 1, 0,
                  1, 0, 0,
                  1, 0, 0,
                  0, 1, 0],

                 ])

def sigmoid(a):
    return 1/(1+np.exp(-a))

target = np.array([[1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [1, 0],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],
                   [0, 1],

                   ])
learning_rate = 0.1

w_hidden = np.random.normal(0, 1, (12, 3)) #(12, 3)
b_hidden = np.random.normal(0, 1, (1, 3)) #(1, 3)
w_out = np.random.normal(0, 1, (3, 2)) #(3, 2)
b_out = np.random.normal(0, 1, (1, 2)) #(1, 2)

for epoch in range(1000):
    for i in range(int(data.size/12)):
        z_hidden = data[i].dot(w_hidden) + b_hidden #(1, 3)
        a_hidden =sigmoid(z_hidden) #(1, 3)
        z_out = a_hidden.dot(w_out) + b_out #(1, 2)
        a_out = z_out #(1, 2)

        c = 1/2 * (np.power(a_out[0][0], 2) + np.power(a_out[0][1], 2))

        d3_1 = (a_out[0][0] - target[i][0])*sigmoid(z_out[0][0])*(1-sigmoid(z_out[0][0]))
        d3_2 = (a_out[0][1] - target[i][1])*sigmoid(z_out[0][1])*(1-sigmoid(z_out[0][1]))

        d2_1 = d3_1*w_out[0][0]*sigmoid(z_hidden[0][0])*(1-sigmoid(z_hidden[0][0])) + d3_1*w_out[0][1]*sigmoid(z_hidden[0][0])*(1-sigmoid(z_hidden[0][0]))
        d2_2 = d3_1*w_out[1][0]*sigmoid(z_hidden[0][1])*(1-sigmoid(z_hidden[0][1])) + d3_1*w_out[1][1]*sigmoid(z_hidden[0][1])*(1-sigmoid(z_hidden[0][1]))
        d2_3 = d3_1*w_out[2][0]*sigmoid(z_hidden[0][2])*(1-sigmoid(z_hidden[0][2])) + d3_1*w_out[2][1]*sigmoid(z_hidden[0][2])*(1-sigmoid(z_hidden[0][2]))

        b_d3_1 = d3_1
        b_d3_2 = d3_2
        b_d3 = np.r_[b_d3_1, b_d3_2] * learning_rate

        b_out = b_out - b_d3

        w_d3_1 = a_hidden * d3_1
        w_d3_2 = a_hidden * d3_2
        w_d3 = np.c_[w_d3_1, w_d3_2] * learning_rate
        w_d3 = np.reshape(w_d3, (3, 2))

        w_out = w_out - w_d3

        b_d2_1 = d2_1
        b_d2_2 = d2_2
        b_d2_3 = d2_3
        b_d2 = np.c_[b_d2_1, b_d2_2, b_d2_3] * learning_rate

        b_hidden = b_hidden - b_d2

        w_d2_1 = data[i] * d2_1
        w_d2_2 = data[i] * d2_2
        w_d2_3 = data[i] * d2_3
        w_d2 = np.c_[w_d2_1, w_d2_2, w_d2_3] * learning_rate

        w_hidden = w_hidden - w_d2

test_data =np.array([[1, 1, 0,
                     0, 1, 0,
                     0, 1, 0,
                     0, 1, 0],

                     [1, 0, 1,
                      1, 1, 1,
                      1, 0, 1,
                      1, 1, 1],

                     [0, 1, 1,
                      0, 1, 0,
                      0, 0, 0,
                      0, 1, 0],
                     ])

for i in range(int(test_data.size/12)):
    z_hidden = test_data[i].dot(w_hidden) + b_hidden #(1, 3)
    a_hidden =sigmoid(z_hidden) #(1, 3)
    z_out = a_hidden.dot(w_out) + b_out #(1, 2)
    a_out = z_out #(1, 2)

    if((a_out[0][0] < a_out[0][1])):
        print("1")
    else:
        print("0")
